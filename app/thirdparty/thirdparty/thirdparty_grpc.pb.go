// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: system/system.proto

package thirdparty

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThirdPartyClient is the client API for ThirdParty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThirdPartyClient interface {
	SendSMS(ctx context.Context, in *SendSMSRequest, opts ...grpc.CallOption) (*Empty, error)
}

type thirdPartyClient struct {
	cc grpc.ClientConnInterface
}

func NewThirdPartyClient(cc grpc.ClientConnInterface) ThirdPartyClient {
	return &thirdPartyClient{cc}
}

func (c *thirdPartyClient) SendSMS(ctx context.Context, in *SendSMSRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.ThirdParty/SendSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThirdPartyServer is the server API for ThirdParty service.
// All implementations must embed UnimplementedThirdPartyServer
// for forward compatibility
type ThirdPartyServer interface {
	SendSMS(context.Context, *SendSMSRequest) (*Empty, error)
	mustEmbedUnimplementedThirdPartyServer()
}

// UnimplementedThirdPartyServer must be embedded to have forward compatible implementations.
type UnimplementedThirdPartyServer struct {
}

func (UnimplementedThirdPartyServer) SendSMS(context.Context, *SendSMSRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSMS not implemented")
}
func (UnimplementedThirdPartyServer) mustEmbedUnimplementedThirdPartyServer() {}

// UnsafeThirdPartyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThirdPartyServer will
// result in compilation errorx.
type UnsafeThirdPartyServer interface {
	mustEmbedUnimplementedThirdPartyServer()
}

func RegisterThirdPartyServer(s grpc.ServiceRegistrar, srv ThirdPartyServer) {
	s.RegisterService(&ThirdParty_ServiceDesc, srv)
}

func _ThirdParty_SendSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServer).SendSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ThirdParty/SendSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServer).SendSMS(ctx, req.(*SendSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThirdParty_ServiceDesc is the grpc.ServiceDesc for ThirdParty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThirdParty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ThirdParty",
	HandlerType: (*ThirdPartyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSMS",
			Handler:    _ThirdParty_SendSMS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system/system.proto",
}
