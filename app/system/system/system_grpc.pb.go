// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: system/system.proto

package system

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SystemClient is the client API for System service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemClient interface {
	// 创建/更新路由组
	ModifyRouteGroup(ctx context.Context, in *RouteGroupSchema, opts ...grpc.CallOption) (*RouteGroupSchema, error)
	// 路由组详情
	GetRouteGroup(ctx context.Context, in *RouteGroupSchema, opts ...grpc.CallOption) (*RouteGroupSchema, error)
	// 删除路由组
	DeleteRouteGroup(ctx context.Context, in *MultipleID, opts ...grpc.CallOption) (*SystemProtoEmpty, error)
	// 路由组列表
	ListRouteGroup(ctx context.Context, in *ListRouteGroupRequest, opts ...grpc.CallOption) (*ListRouteGroupReply, error)
	// 创建/更新路由
	ModifyRoute(ctx context.Context, in *RouteSchema, opts ...grpc.CallOption) (*RouteSchema, error)
	// 路由详情
	GetRoute(ctx context.Context, in *RouteSchema, opts ...grpc.CallOption) (*RouteSchema, error)
	// 删除路由
	DeleteRoute(ctx context.Context, in *MultipleID, opts ...grpc.CallOption) (*SystemProtoEmpty, error)
	// 路由列表
	ListRoute(ctx context.Context, in *ListRouteRequest, opts ...grpc.CallOption) (*ListRouteReply, error)
	// 创建/编辑菜单
	ModifyMenu(ctx context.Context, in *MenuSchema, opts ...grpc.CallOption) (*MenuSchema, error)
	// 菜单详情
	GetMenu(ctx context.Context, in *MenuSchema, opts ...grpc.CallOption) (*MenuSchema, error)
	// 删除菜单
	DeleteMenu(ctx context.Context, in *MultipleID, opts ...grpc.CallOption) (*SystemProtoEmpty, error)
	// 菜单列表
	ListMenu(ctx context.Context, in *ListMenuRequest, opts ...grpc.CallOption) (*ListMenuReply, error)
}

type systemClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemClient(cc grpc.ClientConnInterface) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) ModifyRouteGroup(ctx context.Context, in *RouteGroupSchema, opts ...grpc.CallOption) (*RouteGroupSchema, error) {
	out := new(RouteGroupSchema)
	err := c.cc.Invoke(ctx, "/pb.System/ModifyRouteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetRouteGroup(ctx context.Context, in *RouteGroupSchema, opts ...grpc.CallOption) (*RouteGroupSchema, error) {
	out := new(RouteGroupSchema)
	err := c.cc.Invoke(ctx, "/pb.System/GetRouteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DeleteRouteGroup(ctx context.Context, in *MultipleID, opts ...grpc.CallOption) (*SystemProtoEmpty, error) {
	out := new(SystemProtoEmpty)
	err := c.cc.Invoke(ctx, "/pb.System/DeleteRouteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ListRouteGroup(ctx context.Context, in *ListRouteGroupRequest, opts ...grpc.CallOption) (*ListRouteGroupReply, error) {
	out := new(ListRouteGroupReply)
	err := c.cc.Invoke(ctx, "/pb.System/ListRouteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ModifyRoute(ctx context.Context, in *RouteSchema, opts ...grpc.CallOption) (*RouteSchema, error) {
	out := new(RouteSchema)
	err := c.cc.Invoke(ctx, "/pb.System/ModifyRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetRoute(ctx context.Context, in *RouteSchema, opts ...grpc.CallOption) (*RouteSchema, error) {
	out := new(RouteSchema)
	err := c.cc.Invoke(ctx, "/pb.System/GetRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DeleteRoute(ctx context.Context, in *MultipleID, opts ...grpc.CallOption) (*SystemProtoEmpty, error) {
	out := new(SystemProtoEmpty)
	err := c.cc.Invoke(ctx, "/pb.System/DeleteRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ListRoute(ctx context.Context, in *ListRouteRequest, opts ...grpc.CallOption) (*ListRouteReply, error) {
	out := new(ListRouteReply)
	err := c.cc.Invoke(ctx, "/pb.System/ListRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ModifyMenu(ctx context.Context, in *MenuSchema, opts ...grpc.CallOption) (*MenuSchema, error) {
	out := new(MenuSchema)
	err := c.cc.Invoke(ctx, "/pb.System/ModifyMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetMenu(ctx context.Context, in *MenuSchema, opts ...grpc.CallOption) (*MenuSchema, error) {
	out := new(MenuSchema)
	err := c.cc.Invoke(ctx, "/pb.System/GetMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DeleteMenu(ctx context.Context, in *MultipleID, opts ...grpc.CallOption) (*SystemProtoEmpty, error) {
	out := new(SystemProtoEmpty)
	err := c.cc.Invoke(ctx, "/pb.System/DeleteMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ListMenu(ctx context.Context, in *ListMenuRequest, opts ...grpc.CallOption) (*ListMenuReply, error) {
	out := new(ListMenuReply)
	err := c.cc.Invoke(ctx, "/pb.System/ListMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServer is the server API for System service.
// All implementations must embed UnimplementedSystemServer
// for forward compatibility
type SystemServer interface {
	// 创建/更新路由组
	ModifyRouteGroup(context.Context, *RouteGroupSchema) (*RouteGroupSchema, error)
	// 路由组详情
	GetRouteGroup(context.Context, *RouteGroupSchema) (*RouteGroupSchema, error)
	// 删除路由组
	DeleteRouteGroup(context.Context, *MultipleID) (*SystemProtoEmpty, error)
	// 路由组列表
	ListRouteGroup(context.Context, *ListRouteGroupRequest) (*ListRouteGroupReply, error)
	// 创建/更新路由
	ModifyRoute(context.Context, *RouteSchema) (*RouteSchema, error)
	// 路由详情
	GetRoute(context.Context, *RouteSchema) (*RouteSchema, error)
	// 删除路由
	DeleteRoute(context.Context, *MultipleID) (*SystemProtoEmpty, error)
	// 路由列表
	ListRoute(context.Context, *ListRouteRequest) (*ListRouteReply, error)
	// 创建/编辑菜单
	ModifyMenu(context.Context, *MenuSchema) (*MenuSchema, error)
	// 菜单详情
	GetMenu(context.Context, *MenuSchema) (*MenuSchema, error)
	// 删除菜单
	DeleteMenu(context.Context, *MultipleID) (*SystemProtoEmpty, error)
	// 菜单列表
	ListMenu(context.Context, *ListMenuRequest) (*ListMenuReply, error)
	mustEmbedUnimplementedSystemServer()
}

// UnimplementedSystemServer must be embedded to have forward compatible implementations.
type UnimplementedSystemServer struct {
}

func (UnimplementedSystemServer) ModifyRouteGroup(context.Context, *RouteGroupSchema) (*RouteGroupSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyRouteGroup not implemented")
}
func (UnimplementedSystemServer) GetRouteGroup(context.Context, *RouteGroupSchema) (*RouteGroupSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteGroup not implemented")
}
func (UnimplementedSystemServer) DeleteRouteGroup(context.Context, *MultipleID) (*SystemProtoEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouteGroup not implemented")
}
func (UnimplementedSystemServer) ListRouteGroup(context.Context, *ListRouteGroupRequest) (*ListRouteGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRouteGroup not implemented")
}
func (UnimplementedSystemServer) ModifyRoute(context.Context, *RouteSchema) (*RouteSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyRoute not implemented")
}
func (UnimplementedSystemServer) GetRoute(context.Context, *RouteSchema) (*RouteSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedSystemServer) DeleteRoute(context.Context, *MultipleID) (*SystemProtoEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedSystemServer) ListRoute(context.Context, *ListRouteRequest) (*ListRouteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoute not implemented")
}
func (UnimplementedSystemServer) ModifyMenu(context.Context, *MenuSchema) (*MenuSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyMenu not implemented")
}
func (UnimplementedSystemServer) GetMenu(context.Context, *MenuSchema) (*MenuSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedSystemServer) DeleteMenu(context.Context, *MultipleID) (*SystemProtoEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedSystemServer) ListMenu(context.Context, *ListMenuRequest) (*ListMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenu not implemented")
}
func (UnimplementedSystemServer) mustEmbedUnimplementedSystemServer() {}

// UnsafeSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServer will
// result in compilation errors.
type UnsafeSystemServer interface {
	mustEmbedUnimplementedSystemServer()
}

func RegisterSystemServer(s grpc.ServiceRegistrar, srv SystemServer) {
	s.RegisterService(&System_ServiceDesc, srv)
}

func _System_ModifyRouteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteGroupSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ModifyRouteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.System/ModifyRouteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ModifyRouteGroup(ctx, req.(*RouteGroupSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetRouteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteGroupSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetRouteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.System/GetRouteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetRouteGroup(ctx, req.(*RouteGroupSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DeleteRouteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DeleteRouteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.System/DeleteRouteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DeleteRouteGroup(ctx, req.(*MultipleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ListRouteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRouteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ListRouteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.System/ListRouteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ListRouteGroup(ctx, req.(*ListRouteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ModifyRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ModifyRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.System/ModifyRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ModifyRoute(ctx, req.(*RouteSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.System/GetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetRoute(ctx, req.(*RouteSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.System/DeleteRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DeleteRoute(ctx, req.(*MultipleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ListRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ListRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.System/ListRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ListRoute(ctx, req.(*ListRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ModifyMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ModifyMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.System/ModifyMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ModifyMenu(ctx, req.(*MenuSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.System/GetMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetMenu(ctx, req.(*MenuSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.System/DeleteMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DeleteMenu(ctx, req.(*MultipleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ListMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ListMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.System/ListMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ListMenu(ctx, req.(*ListMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// System_ServiceDesc is the grpc.ServiceDesc for System service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var System_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.System",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModifyRouteGroup",
			Handler:    _System_ModifyRouteGroup_Handler,
		},
		{
			MethodName: "GetRouteGroup",
			Handler:    _System_GetRouteGroup_Handler,
		},
		{
			MethodName: "DeleteRouteGroup",
			Handler:    _System_DeleteRouteGroup_Handler,
		},
		{
			MethodName: "ListRouteGroup",
			Handler:    _System_ListRouteGroup_Handler,
		},
		{
			MethodName: "ModifyRoute",
			Handler:    _System_ModifyRoute_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _System_GetRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _System_DeleteRoute_Handler,
		},
		{
			MethodName: "ListRoute",
			Handler:    _System_ListRoute_Handler,
		},
		{
			MethodName: "ModifyMenu",
			Handler:    _System_ModifyMenu_Handler,
		},
		{
			MethodName: "GetMenu",
			Handler:    _System_GetMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _System_DeleteMenu_Handler,
		},
		{
			MethodName: "ListMenu",
			Handler:    _System_ListMenu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system/system.proto",
}
